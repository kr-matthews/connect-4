{"version":3,"sources":["Options/Header.js","Options/Lobby.js","Options/PlayerName.js","Options/PlayerColour.js","Options/SiteTheme.js","Room/CreateRoom.js","Room/JoinRoom.js","Room/RoomHeader.js","Game/Game.js","Game/Board.js","Game/GameFooter.js","Game/useGame.js","Room/useRoom.js","Room/Room.js","useLocalState.js","GlobalStyle.js","App.js","index.js"],"names":["Header","children","map","child","ind","Lobby","PlayerName","name","setName","useState","isEditing","setIsEditing","loseFocusHandler","autoFocus","type","value","placeholder","onChange","e","target","trim","onKeyDown","key","onBlur","onClick","PlayerColour","colour","setColour","SiteTheme","themeType","toggleTheme","CreateRoom","createRoomHandler","restartMethodInput","setRestartMethodInput","handleChange","method","toLowerCase","checked","preventDefault","JoinRoom","joinRoomHandler","roomCodeInput","setRoomCodeInput","toUpperCase","RoomHeader","roomCode","isOwner","opponent","restartMethod","resultHistory","kickOpponentHandler","closeRoomHandler","leaveRoomHandler","restartMethodMessage","copyToClipboard","a","navigator","clipboard","writeText","alert","style","color","wins","draws","loses","Game","Row","row","isViewersTurn","viewer","moveHandler","colours","rowCells","col","player","isHighlight","colIsOpen","Cell","clickHandler","isClickable","useContext","ThemeContext","background","backgroundColor","pieceStyle","borderColor","cellClass","cellStyle","foreground","className","Board","board","tableRows","length","push","GameFooter","gameStatus","winner","toPlayNext","forfeitHandler","newGameHandler","gameStatusMessage","directions","emptyTable","rows","cols","val","r","c","combineTables","tables","names","tableCount","combinedTable","i","moveHistoryReducer","state","action","newState","pop","console","log","piecesReducer","useGame","initialToPlayFirst","lineLen","toPlayFirst","setToPlayFirst","forfeiter","setForfeiter","useReducer","moveHistory","dispatchMoveHistory","pieces","dispatchPieces","boardStatus","isWon","isFull","highlights","createHighlights","openColumns","checkOpenCols","findEmptyRow","d","d_r","d_c","j","checkLine","table","k","isOpen","resetGame","placePiece","forfeit","resultReducer","initialResults","Room","Math","floor","random","setOpponent","playerCount","dispatchResult","wentFirst","setWentFirst","toGoFirst","useEffect","useRoom","useLocalState","initialValue","savedValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","GlobalStyle","createGlobalStyle","theme","themes","light","dark","createContext","App","setTheme","setRoomCode","setIsOwner","setRestartMethod","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1cfd35f.chunk.js","sourcesContent":["function Header({ children }) {\n  // TODO: UI: styling for Header/options (and all sub-components)\n\n  // TODO: LATER: allow user to clear local storage via localStorage.clear()\n\n  return (\n    <div>\n      {children.map((child, ind) => {\n        return <div key={ind}>{child}</div>;\n      })}\n    </div>\n  );\n}\n\nexport default Header;\n","// TODO: UI: improve design/css of lobby (and sub-components)\n\nfunction Lobby({ children }) {\n  return (\n    <>\n      <h2>Lobby</h2>\n      <p>\n        Welcome to the Connect 4 lobby. Here, you can create or join a room.\n        Rooms are where you can play a game of Connect 4, and can fit up to 2\n        players.\n      </p>\n      {children}\n    </>\n  );\n}\n\nexport default Lobby;\n","import { useState } from \"react\";\n\nconst defaultName = \"Nameless\";\n\nfunction PlayerName({ name, setName }) {\n  const [isEditing, setIsEditing] = useState(false);\n\n  // click name to edit it\n  function clickHandler() {\n    setIsEditing(true);\n  }\n\n  // type name; update state\n  function changeHandler(e) {\n    setName(e.target.value.trim());\n  }\n\n  // save/submit via enter...\n  function keyDownHandler(e) {\n    if (e.key === \"Enter\") {\n      loseFocusHandler();\n    }\n  }\n\n  // ... or by clicking anywhere outside (losing focus)\n  function loseFocusHandler() {\n    name === \"\" && setName(defaultName);\n    setIsEditing(false);\n  }\n\n  return (\n    <>\n      Your name is{\" \"}\n      {isEditing ? (\n        <input\n          autoFocus\n          type=\"text\"\n          value={name}\n          placeholder=\"Name\"\n          onChange={changeHandler}\n          onKeyDown={keyDownHandler}\n          onBlur={loseFocusHandler}\n        />\n      ) : (\n        <button onClick={clickHandler}>{name}</button>\n      )}\n      .\n    </>\n  );\n}\n\nexport default PlayerName;\n","function PlayerColour({ colour, setColour }) {\n  function changeHandler(e) {\n    setColour(e.target.value);\n  }\n\n  return (\n    <>\n      Your piece colour is{\" \"}\n      <input type=\"color\" value={colour} onChange={changeHandler} />.\n    </>\n  );\n}\n\nexport default PlayerColour;\n","function SiteTheme({ themeType, toggleTheme }) {\n  return (\n    <>\n      You're using the <button onClick={toggleTheme}>{themeType}</button> theme.\n    </>\n  );\n}\n\nexport default SiteTheme;\n","import { useState } from \"react\";\n\nfunction CreateRoom({ createRoomHandler }) {\n  const [restartMethodInput, setRestartMethodInput] = useState(\"alternate\");\n\n  function handleChange(e) {\n    setRestartMethodInput(e.target.value);\n  }\n\n  return (\n    <div>\n      <h3>Create a Room</h3>\n      <p>\n        Once created, you will be given a room code which you can share with a\n        friend to join.\n      </p>\n      <p>\n        The first player of the first game will be selected randomly. Select who\n        will go first in subsequent games.\n      </p>\n      <form>\n        {[\"Alternate\", \"Loser\", \"Winner\", \"Random\"].map((method) => {\n          return (\n            <label key={method}>\n              <input\n                type=\"radio\"\n                value={method.toLowerCase()}\n                checked={restartMethodInput === method.toLowerCase()}\n                onChange={handleChange}\n              />\n              {method}\n            </label>\n          );\n        })}\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            createRoomHandler(restartMethodInput);\n          }}\n        >\n          Create\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateRoom;\n","import { useState } from \"react\";\n\nfunction JoinRoom({ joinRoomHandler }) {\n  const [roomCodeInput, setRoomCodeInput] = useState(\"\");\n\n  function changeHandler(e) {\n    setRoomCodeInput(e.target.value.toUpperCase().trim());\n  }\n\n  return (\n    <div>\n      <h3>Join a Room</h3>\n      <p>\n        If someone else has given you a code, use that code to join their room.\n        Codes are 4 characters.\n      </p>\n      <form>\n        <input\n          type=\"text\"\n          value={roomCodeInput}\n          placeholder=\"enter room code\"\n          onChange={changeHandler}\n        />\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            joinRoomHandler(roomCodeInput);\n          }}\n        >\n          Join\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default JoinRoom;\n","function RoomHeader({\n  roomCode,\n  isOwner,\n  opponent,\n  restartMethod,\n  resultHistory,\n  kickOpponentHandler,\n  closeRoomHandler,\n  leaveRoomHandler,\n}) {\n  const restartMethodMessage =\n    restartMethod === \"random\"\n      ? \"The first player of a new game is selected randomly.\"\n      : restartMethod === \"alternate\"\n      ? \"Players alternate playing first in a new game.\"\n      : // else it's \"winner\" or \"loser\"\n        \"The \" +\n        restartMethod +\n        \" of a game will go first for the next game. In the event of a draw, the same player will go first.\";\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(roomCode);\n    alert(\"Text copied to clipboard.\");\n  };\n\n  // TODO: UI: improve Header design/css\n\n  return (\n    <>\n      {/* describe opponent, or say waiting for one */}\n      {opponent ? (\n        <div>\n          You are playing against{\" \"}\n          <span style={{ color: opponent.colour }}>{opponent.name}</span>.\n        </div>\n      ) : (\n        <div>Waiting for an opponent to join the room.</div>\n      )}\n\n      {/* who owns the room, and the code */}\n      {isOwner ? (\n        <div>You created and are in control of this room.</div>\n      ) : (\n        <div>\n          You are in {opponent.name}'s room. They have control of the room.\n        </div>\n      )}\n      <div>\n        The room code is <button onClick={copyToClipboard}>{roomCode}</button>.\n      </div>\n\n      {/* explain who goes first for new games */}\n      <div>{restartMethodMessage}</div>\n\n      {/* display W-D-L history against this opponent */}\n      {opponent && (\n        <div>\n          <span>Wins: {resultHistory.wins}</span>\n          <span>Draws: {resultHistory.draws}</span>\n          <span>Loses: {resultHistory.loses}</span>\n        </div>\n      )}\n\n      {/* options to close/leave room or kick opponent, as applicable */}\n      <div>\n        {isOwner ? (\n          <button onClick={closeRoomHandler}>Close Room</button>\n        ) : (\n          <button onClick={leaveRoomHandler}>Leave Room</button>\n        )}\n        {isOwner && opponent && (\n          <button onClick={kickOpponentHandler}>Kick Opponent</button>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default RoomHeader;\n","function Game({ children }) {\n  return <>{children}</>;\n}\n\nexport default Game;\n","import { useContext } from \"react\";\n\nimport { ThemeContext } from \"./../App.js\";\n\nimport \"./board.css\";\n\nfunction Board({ viewer, board, isViewersTurn, colours, moveHandler }) {\n  const { foreground } = useContext(ThemeContext);\n  const rows = board.length;\n  let tableRows = [];\n  // the first row goes on the bottom, visually\n  for (let row = rows - 1; row > -1; row--) {\n    tableRows.push(\n      <Row\n        key={row}\n        row={board[row]}\n        viewer={viewer}\n        isViewersTurn={isViewersTurn}\n        moveHandler={moveHandler}\n        colours={colours}\n      />\n    );\n  }\n\n  return (\n    <table className=\"board\" style={{ backgroundColor: foreground }}>\n      <tbody>{tableRows}</tbody>\n    </table>\n  );\n}\n\nfunction Row({ row, viewer, isViewersTurn, moveHandler, colours }) {\n  let rowCells = row.map(({ player, isHighlight, colIsOpen }, col) => {\n    return (\n      <Cell\n        key={col}\n        clickHandler={() => moveHandler(col)} // TEMP: moveHandler(col, viewer)\n        colour={colours[player]}\n        isHighlight={isHighlight}\n        isClickable={isViewersTurn && colIsOpen}\n      />\n    );\n  });\n\n  return <tr>{rowCells}</tr>;\n}\n\nfunction Cell({ clickHandler, colour, isHighlight, isClickable }) {\n  // colours/styles\n  const { background, foreground } = useContext(ThemeContext);\n  const backgroundColor = colour || background;\n  // TODO: LATER: COLOUR: make highlight opp colour of piece\n  const borderColor = isHighlight ? background : backgroundColor;\n  const pieceStyle = { backgroundColor, borderColor };\n\n  const cellClass = isClickable ? \"clickable cell\" : \"cell\";\n  const cellStyle = { borderColor: foreground };\n\n  return (\n    <td className={cellClass} style={cellStyle} onClick={clickHandler}>\n      <span className=\"piece\" style={pieceStyle}></span>\n    </td>\n  );\n}\n\nexport default Board;\nexport { Row, Cell }; // for testing\n","function GameFooter({\n  viewer,\n  isOwner,\n  gameStatus,\n  winner,\n  toPlayNext,\n  forfeitHandler,\n  newGameHandler,\n}) {\n  // to display to viewer\n  function gameStatusMessage() {\n    switch (gameStatus) {\n      case \"won\":\n        return winner === viewer ? \"Congratulations, you won!\" : \"You lost.\";\n      case \"forfeit\":\n        return winner === viewer\n          ? \"Your opponent has forfeit the game -- you win.\"\n          : \"You lost by forfeiting the game.\";\n      case \"draw\":\n        return \"It's a draw.\";\n      case \"ongoing\":\n        return viewer === toPlayNext\n          ? \"It's your turn to drop a piece.\"\n          : \"Waiting for your opponent to play.\";\n      default:\n        return \"Something has gone wrong. Apologies.\";\n    }\n  }\n\n  // TODO: UI: improve Footer design/css\n\n  //  displayed for viewer's point of view\n  return (\n    <>\n      {/* explain what's going on with the game */}\n      <p>{gameStatusMessage()}</p>\n\n      {/* buttons for forfeiting or restarting, as applicable */}\n      {gameStatus === \"ongoing\" ? (\n        <button onClick={() => forfeitHandler(viewer)}>Forfeit</button>\n      ) : (\n        isOwner && <button onClick={newGameHandler}>New Game</button>\n      )}\n    </>\n  );\n}\n\nexport default GameFooter;\n","import { useState, useReducer } from \"react\";\n\n//// Generic constants helpers\n\n// the possible line directions from/to a fixed point\nconst directions = [\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n];\n\n// create empty tables (for initial states, and on resets)\nfunction emptyTable(rows, cols, val) {\n  let board = [];\n  for (let r = 0; r < rows; r++) {\n    let row = [];\n    for (let c = 0; c < cols; c++) {\n      row.push(val === \"empty\" ? {} : val);\n    }\n    board.push(row);\n  }\n  return board;\n}\n\n// merge data into one table for passing to component\nfunction combineTables(tables, names) {\n  const tableCount = tables.length;\n  const [rows, cols] = [tables[0].length, tables[0][0].length];\n  let combinedTable = emptyTable(rows, cols, \"empty\");\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      combinedTable[row][col] = {};\n      for (let i = 0; i < tableCount; i++) {\n        combinedTable[row][col][names[i]] = tables[i][row][col];\n      }\n    }\n  }\n  return combinedTable;\n}\n\n//// Reducers\n// outside the hook function to ensure they are pure\n\nfunction moveHistoryReducer(state, action) {\n  let newState = [...state];\n  switch (action.type) {\n    case \"reset\":\n      return [];\n    case \"addMove\":\n      let { player, row, col } = action;\n      newState.push({ player, row, col });\n      return newState;\n    case \"undo\":\n      // NOTE: this case is currently not used\n      if (state === []) {\n        // nothing to undo\n        return state;\n      } else {\n        newState.pop();\n        return newState;\n      }\n    default:\n      console.log(\"moveHistoryReducer switch didn't match any case\");\n      return state;\n  }\n}\n\nfunction piecesReducer(state, action) {\n  let newState = [...state];\n  switch (action.type) {\n    case \"reset\":\n      return emptyTable(action.rows, action.cols, null);\n    case \"placePiece\":\n      // add the piece\n      newState[action.row][action.col] = action.player;\n      return newState;\n    case \"undo\":\n      // NOTE: this case is currently not used\n      newState[action.row][action.col] = null;\n      return newState;\n    default:\n      console.log(\"peicesReducer switch didn't match any case\");\n      return state;\n  }\n}\n\n//// The actual hook\n\nfunction useGame(initialToPlayFirst, rows = 6, cols = 7, lineLen = 4) {\n  //// States & Constants\n\n  // index of player to play first; only updates on reset\n  const [toPlayFirst, setToPlayFirst] = useState(initialToPlayFirst);\n  // who has forfeit (player index, or null)\n  const [forfeiter, setForfeiter] = useState(null);\n  // stack (array) of {player, row, col}\n  const [moveHistory, dispatchMoveHistory] = useReducer(moveHistoryReducer, []);\n  // table of player indices/null; indicates which piece is there (if any)\n  const [pieces, dispatchPieces] = useReducer(\n    piecesReducer,\n    emptyTable(rows, cols, null)\n  );\n  // based purely on the board (not forfeit); ongoing, won, or draw\n  const boardStatus = isWon() // check the board for a win\n    ? \"won\" // found win\n    : isFull() // otherwise, check the board for a draw\n    ? \"draw\" // found draw\n    : \"ongoing\"; // didn't find draw\n  // takes into account possible forfeit: ongoing, won, draw, or forfeit\n  const gameStatus =\n    forfeiter !== null // check for feifeit\n      ? \"forfeit\" // if so\n      : boardStatus; // otherwise, default to boardStatus\n  // index of winning player (via game play for via forfeit), or null\n  const winner =\n    gameStatus === \"forfeit\" // check for forfeit\n      ? 1 - forfeiter // if so, other player won\n      : gameStatus !== \"won\" // otherwise, check for win\n      ? null // if no win, there's no winner\n      : moveHistory[moveHistory.length - 1].player; // if win, then most recent player won\n  // table of booleans; indicates whether spot is highlighted in a win\n  // (not using state and useEffect since it might make undo awkward?)\n  const highlights = createHighlights();\n  // matrix, row 0 at the bottom; each cell is an object\n  const openColumns = checkOpenCols();\n  const board = combineTables(\n    [pieces, highlights, openColumns],\n    [\"player\", \"isHighlight\", \"colIsOpen\"]\n  );\n  // index of player to play next move, or null if game is not ongoing\n  const toPlayNext =\n    gameStatus !== \"ongoing\"\n      ? null\n      : moveHistory.length === 0\n      ? toPlayFirst\n      : 1 - moveHistory[moveHistory.length - 1].player;\n\n  //// Helpers\n  // isWon and createHighlights share a lot of code :(\n\n  // find row that piece will end up in when dropped in this col\n  function findEmptyRow(col) {\n    for (let row = 0; row < rows; row++) {\n      if (pieces[row][col] === null) {\n        return row;\n      }\n    }\n    return null;\n  }\n\n  // check whether the board is full\n  function isFull() {\n    // check the top row for nulls\n    for (let col = 0; col < cols; col++) {\n      if (pieces[rows - 1][col] === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // check if the game is won\n  function isWon() {\n    if (moveHistory.length < 2 * lineLen - 1) {\n      // impossible for anyone to have won yet\n      return false;\n    }\n    // only need to examine most recent move (which exists)\n    const { player, row, col } = moveHistory[moveHistory.length - 1];\n    for (let d = 0; d < directions.length; d++) {\n      const [d_r, d_c] = directions[d];\n      // check for a win using given piece in direction directions[d]\n      for (let j = -3; j < 1; j++) {\n        // check for a win in the direction starting from offset of j\n        if (checkLine(player, row + j * d_r, col + j * d_c, d_r, d_c)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // highlight winning locations\n  function createHighlights() {\n    let table = emptyTable(rows, cols, false);\n    if (moveHistory.length < 2 * lineLen - 1) {\n      // impossible for anyone to have won yet; no highlights needed\n      return table;\n    }\n    // only check the most recently played location (which exists)\n    let { player, row, col } = moveHistory[moveHistory.length - 1];\n    for (let d = 0; d < directions.length; d++) {\n      const [d_r, d_c] = directions[d];\n      // for the 4 pieces in this direction (including row,col),\n      //  check if it is in a line pointing towards row,col\n      for (let j = -lineLen + 1; j < 1; j++) {\n        if (checkLine(player, row + j * d_r, col + j * d_c, d_r, d_c)) {\n          // this piece, and the 3 after it, form a line of 4, so update them all\n          for (let k = j; k < j + lineLen; k++) {\n            table[row + k * d_r][col + k * d_c] = true;\n          }\n        }\n      }\n    }\n    return table;\n  }\n\n  // indicates whether the cell is in an open column\n  function checkOpenCols() {\n    let table = emptyTable(rows, cols);\n    for (let col = 0; col < cols; col++) {\n      const isOpen = pieces[rows - 1][col] === null;\n      for (let row = 0; row < rows; row++) {\n        table[row][col] = isOpen;\n      }\n    }\n    return table;\n  }\n\n  // given a spot and a direction, check if it's a line of 4\n  function checkLine(player, row, col, d_r, d_c) {\n    for (let k = 0; k < lineLen; k++) {\n      let [r, c] = [row + k * d_r, col + k * d_c];\n      // if (r, c) is out of bounds, or doesn't have the right piece\n      if (0 > r || r >= rows || 0 > c || c >= cols || pieces[r][c] !== player) {\n        return false;\n      }\n    }\n    // all 4 were in-bounds and belonged to player, so return true (they won)\n    return true;\n  }\n\n  //// Externally accessible functions\n\n  // given out to reset all states\n  function resetGame(player) {\n    setToPlayFirst(player);\n    setForfeiter(null);\n    dispatchMoveHistory({ type: \"reset\" });\n    // (use dispatch instead of useEffect since might make undo awkward?)\n    dispatchPieces({ type: \"reset\", rows, cols });\n  }\n\n  // given out to allow component to (attempt to) place a piece\n  function placePiece(col, player = toPlayNext) {\n    let row = findEmptyRow(col);\n    // only proceed if move is valid\n    if (gameStatus === \"ongoing\" && player === toPlayNext && row !== null) {\n      dispatchMoveHistory({ type: \"addMove\", player, row, col });\n      // (use dispatch instead of useEffect since might make undo awkward?)\n      dispatchPieces({ type: \"placePiece\", player, row, col });\n    }\n  }\n\n  function forfeit(player) {\n    setForfeiter(player);\n  }\n\n  //// Return\n\n  // TODO: MAYBE LATER: return an undo function\n  return {\n    board,\n    gameStatus,\n    toPlayNext,\n    winner,\n    resetGame,\n    placePiece,\n    forfeit,\n  };\n}\n\nexport { useGame };\n","import { useState, useEffect, useReducer } from \"react\";\n\nimport { useGame } from \"./../Game/useGame.js\";\n\n// TODO: TEST: create tests for useRoom hook\n\nfunction resultReducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return initialResults;\n    default:\n      // win, draw, or lose\n      let newState = { ...state };\n      newState[action.type + \"s\"] += 1;\n      return newState;\n  }\n}\n\n//// Helpers for reducers\n\nconst initialResults = { wins: 0, draws: 0, loses: 0 };\n\n// first player of first game is random if unspecified\nfunction useRoom(restartMethod, toPlayFirst = Math.floor(Math.random() * 2)) {\n  //// States\n\n  // other player's name and colour, once they join\n  // TODO: HOOK: create custom hook to replace constant below?\n  // TEMP: opponent value in useRoom\n  const [opponent, setOpponent] = useState({ name: \"Bob\", colour: \"red\" });\n  // how many players are present\n  const playerCount = opponent === null ? 1 : 2;\n  // history of all games played\n  const [resultHistory, dispatchResult] = useReducer(\n    resultReducer,\n    initialResults\n  );\n  // the game custom hook\n  const {\n    board,\n    gameStatus,\n    toPlayNext,\n    winner,\n    resetGame,\n    placePiece,\n    forfeit,\n  } = useGame(toPlayFirst);\n  // who started the current game (in case first player should alternate)\n  const [wentFirst, setWentFirst] = useState(toPlayFirst);\n\n  //// Effects\n\n  // at end of game, update the W-D-L tally and make sounds\n  //  possibly these should be distinct effects?\n  useEffect(() => {\n    switch (gameStatus) {\n      case \"won\":\n      case \"forfeit\":\n        winner === 0 && dispatchResult({ type: \"win\" });\n        // TODO: SOUND: for win\n        winner === 0 && console.log(\"win sound\"); // TEMP:\n        winner === 1 && dispatchResult({ type: \"lose\" });\n        // TODO: SOUND: for lose\n        winner === 1 && console.log(\"lose sound\"); // TEMP:\n        break;\n      case \"draw\":\n        dispatchResult({ type: \"draw\" });\n        console.log(\"draw sound\"); // TEMP:\n        // TODO: SOUND: for win\n        break;\n      default:\n    }\n  }, [gameStatus, winner]);\n\n  // if a player leaves, reset the W-D-L record\n  useEffect(() => {\n    if (playerCount === 1) {\n      dispatchResult({ type: \"reset\" });\n    }\n  }, [playerCount]);\n\n  // play sounds when it becomes your turn to play (opponent moves, or new game)\n  // TODO: SOUND: problem: plays both sounds when opp joins and it's your turn\n  useEffect(() => {\n    if (playerCount === 1) {\n      // TODO: SOUND: player leaving\n      console.log(\"Opponent left sound\"); // TEMP:\n    } else {\n      // TODO: SOUND: player joining\n      console.log(\"Opponent joined sound\"); // TEMP:\n    }\n  }, [playerCount]);\n  useEffect(() => {\n    if (toPlayNext === 0) {\n      // TODO: SOUND: your turn\n      console.log(\"Your turn sound\"); // TEMP:\n    }\n  }, [toPlayNext]);\n\n  //// Externally available functions\n\n  // when room owner starts a new game\n  //  basically figure out who goes first and then call useGame's reset\n  //  also update setWentFirst as may be needed for next such update\n  function newGameHandler(gameStatus) {\n    let toGoFirst = null;\n    // figure out who will go first\n    switch (restartMethod) {\n      case \"random\":\n        toGoFirst = Math.floor(Math.random() * 2);\n        break;\n      case \"alternate\":\n        toGoFirst = 1 - wentFirst;\n\n        break;\n      case \"loser\":\n        // if it's a draw, keep the same player\n        toGoFirst = gameStatus === \"draw\" ? wentFirst : 1 - winner;\n        break;\n      case \"winner\":\n        // if it's a draw, keep the same player\n        toGoFirst = gameStatus === \"draw\" ? wentFirst : winner;\n        break;\n      default:\n        console.log(\"New Game click handler didn't match any case.\");\n        toGoFirst = 0;\n    }\n    // call useGame's reset, update own state\n    resetGame(toGoFirst);\n    setWentFirst(toGoFirst);\n  }\n\n  function kickOpponentHandler() {\n    // TEMP: kickOpponentHandler -- need to send out message\n    setOpponent(null);\n  }\n\n  //// Return\n\n  return {\n    opponent,\n    resultHistory,\n    board,\n    gameStatus,\n    winner,\n    toPlayNext,\n    moveHandler: placePiece,\n    forfeitHandler: forfeit,\n    newGameHandler,\n    kickOpponentHandler,\n  };\n}\n\nexport { useRoom };\n","import RoomHeader from \"./RoomHeader.js\";\nimport Game from \"./../Game/Game.js\";\nimport Board from \"./../Game/Board.js\";\nimport GameFooter from \"./../Game/GameFooter.js\";\n\nimport { useRoom } from \"./useRoom.js\";\n\n// the room is seen from the current player's view\n//  each player has their own instantiation of the 'shared' room\n\nfunction Room({\n  player,\n  isOwner,\n  roomCode,\n  restartMethod,\n  closeRoomHandler,\n  leaveRoomHandler,\n}) {\n  //// Constants\n\n  const {\n    opponent,\n    resultHistory,\n    board,\n    gameStatus,\n    winner,\n    toPlayNext,\n    moveHandler,\n    forfeitHandler,\n    newGameHandler,\n    kickOpponentHandler,\n  } = useRoom(restartMethod);\n\n  //// Return\n\n  return (\n    <>\n      <h2>Room</h2>\n      <RoomHeader\n        roomCode={roomCode}\n        isOwner={isOwner}\n        opponent={opponent}\n        restartMethod={restartMethod}\n        resultHistory={resultHistory}\n        kickOpponentHandler={kickOpponentHandler}\n        closeRoomHandler={closeRoomHandler}\n        leaveRoomHandler={leaveRoomHandler}\n      />\n\n      {opponent && (\n        <Game>\n          <Board\n            viewer={0}\n            board={board}\n            isViewersTurn={0 === toPlayNext}\n            colours={[player.colour, opponent.colour]}\n            moveHandler={moveHandler}\n          />\n          <GameFooter\n            viewer={0}\n            isOwner={isOwner}\n            gameStatus={gameStatus}\n            winner={winner}\n            toPlayNext={toPlayNext}\n            forfeitHandler={forfeitHandler}\n            newGameHandler={newGameHandler}\n          />\n        </Game>\n      )}\n    </>\n  );\n}\n\nexport default Room;\n","import { useState } from \"react\";\n\nfunction useLocalState(key, initialValue) {\n  const savedValue = JSON.parse(localStorage.getItem(key));\n  const [value, setValue] = useState(savedValue || initialValue);\n  function setLocalValue(newValue) {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  }\n  return [value, setLocalValue];\n}\n\nexport { useLocalState };\n","import { createGlobalStyle } from \"styled-components\";\n\n// TODO: THEME: in dark mode, on refresh, page transitions from light mode\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n      background: ${({ theme }) => theme.background};\n      color: ${({ theme }) => theme.foreground};\n      transition: all 0.75s ease-in;\n      transition-property: background, color\n    }\n  `;\n\nexport { GlobalStyle };\n","import { useState, createContext } from \"react\";\n\nimport Header from \"./Options/Header.js\";\nimport Lobby from \"./Options/Lobby.js\";\n\nimport PlayerName from \"./Options/PlayerName.js\";\nimport PlayerColour from \"./Options/PlayerColour.js\";\nimport SiteTheme from \"./Options/SiteTheme.js\";\n\nimport CreateRoom from \"./Room/CreateRoom.js\";\nimport JoinRoom from \"./Room/JoinRoom.js\";\nimport Room from \"./Room/Room.js\";\n\nimport { useLocalState } from \"./useLocalState.js\";\nimport { GlobalStyle } from \"./GlobalStyle.js\";\n\n// TODO: LATER: option to add time limit to moves\n//  careful: game auto starts on second player join\n\n//// Page Theme\n\nconst themes = {\n  light: { type: \"light\", background: \"#F5F5F5\", foreground: \"#121212\" },\n  dark: { type: \"dark\", background: \"#121212\", foreground: \"#F5F5F5\" },\n};\nconst ThemeContext = createContext(themes.light);\n\n//// App\n\nfunction App() {\n  //// Player Attributes/Properties and Theme\n\n  const [name, setName] = useLocalState(\"name\", \"Nameless\");\n  // TODO: INIT VAL: select random colour as  default\n  const [colour, setColour] = useLocalState(\"colour\", \"#0000FF\");\n\n  const [theme, setTheme] = useLocalState(\"theme\", themes.light);\n  function toggleTheme() {\n    setTheme(theme.type === \"light\" ? themes.dark : themes.light);\n  }\n\n  // these 3 consts and 5 functions should probably be a hook?\n  const [roomCode, setRoomCode] = useState(null);\n  const [isOwner, setIsOwner] = useState(null);\n  const [restartMethod, setRestartMethod] = useState(\"alternate\");\n\n  // many of these functions need to send out messages\n\n  function createRoomHandler(restartMethodInput) {\n    // randomly generate room code (make sure it doesn't already exist)\n    // take in restartMethod and pass to Room\n    setRoomCode(generateRoomCode());\n    setIsOwner(true);\n    setRestartMethod(restartMethodInput);\n  }\n\n  function joinRoomHandler(roomCodeInput) {\n    // TODO: check roomCode is valid\n    if (true) {\n      setRoomCode(roomCodeInput);\n      setIsOwner(false);\n    }\n  }\n\n  function closeRoomHandler() {\n    setRoomCode(null);\n    setIsOwner(null);\n  }\n\n  function leaveRoomHandler() {\n    setRoomCode(null);\n    setIsOwner(null);\n    setRestartMethod(\"alternate\");\n  }\n\n  function generateRoomCode() {\n    // TODO: write generateRoomCode\n    //  and confirm codes are 4 chars (see JoinRoom.js)\n    // TEMP: generateRoomCode returns same code every time\n\n    return \"KNKT\";\n  }\n\n  //// Return\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <GlobalStyle theme={theme} />\n      <Header>\n        <PlayerName name={name} setName={setName} />\n        <PlayerColour colour={colour} setColour={setColour} />\n        <SiteTheme themeType={theme.type} toggleTheme={toggleTheme} />\n      </Header>\n      <h1>Connect 4 [WIP]</h1>\n      {roomCode ? (\n        <Room\n          player={{ name, colour }}\n          isOwner={isOwner}\n          roomCode={roomCode}\n          restartMethod={restartMethod}\n          closeRoomHandler={closeRoomHandler}\n          leaveRoomHandler={leaveRoomHandler}\n        />\n      ) : (\n        <Lobby>\n          <CreateRoom createRoomHandler={createRoomHandler} />\n          <JoinRoom joinRoomHandler={joinRoomHandler} />\n        </Lobby>\n      )}\n    </ThemeContext.Provider>\n    // TODO: COMPONENT: add Links component\n  );\n}\n\nexport default App;\n\nexport { ThemeContext };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}