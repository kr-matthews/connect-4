{"version":3,"sources":["Options.js","Lobby.js","Header.js","Board.js","Footer.js","useGame.js","useRoom.js","Room.js","App.js","index.js"],"names":["Options","Lobby","Header","isOwner","playerCount","opponent","restartMethod","resultHistory","message","style","color","colour","name","wins","draws","loses","Row","viewer","row","placePiece","colours","toPlayNext","rowCells","map","col","player","isHighlight","Cell","backgroundColor","pieceStyle","borderColor","cellClass","className","onClick","Board","board","tableRows","length","push","Footer","gameStatus","resetGame","wentFirst","setWentFirst","restartHandler","Math","floor","random","console","log","dispatchResult","directions","emptyTable","rows","cols","val","r","c","combineTables","tables","names","tableCount","combinedTable","i","moveHistoryReducer","state","action","newState","type","pop","piecesReducer","opponentReducer","property","value","resultReducer","initialResults","useRoom","firstPlayer","useState","useReducer","game","initialToPlayFirst","lineLen","toPlayFirst","setToPlayFirst","moveHistory","dispatchMoveHistory","pieces","dispatchPieces","isWon","isFull","highlights","createHighlights","findEmptyRow","d","d_r","d_c","j","checkLine","table","k","useGame","useEffect","Room","roomId","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.143209f7.chunk.js","sourcesContent":["function Options() {\n  // TODO: Options component\n  return <p>Options: set name, colour, theme</p>;\n}\n\nexport default Options;\n","function Lobby() {\n  // TODO: Lobby component\n  return (\n    <>\n      <h2>Lobby</h2>\n      <p>Create or join a room.</p>\n    </>\n  );\n}\n\nexport default Lobby;\n","function Header({\n  isOwner,\n  playerCount,\n  opponent,\n  restartMethod,\n  resultHistory,\n}) {\n  function message() {\n    switch (restartMethod) {\n      case \"random\":\n        return \"The first player of a new game is selected randomly.\";\n      case \"alternate\":\n        return \"Players alternate playing first in a new game.\";\n      default:\n        // \"winner\" or \"loser\"\n        return (\n          \"The \" +\n          restartMethod +\n          \" of a game will go first for the next game. In the event of a draw, the same player will go first.\"\n        );\n    }\n  }\n\n  // TODO: improve Header design/css\n  return (\n    <>\n      <div>{message()}</div>\n      {playerCount === 1 ? (\n        <div>Waiting for an opponent to join the room.</div>\n      ) : (\n        <div>\n          {/* TODO: get Blue from context */}\n          <span style={{ color: \"Blue\" }}>You</span> are playing against{\" \"}\n          <span style={{ color: opponent.colour }}>{opponent.name}</span>.\n        </div>\n      )}\n      {playerCount === 2 && (\n        <div>\n          <span>Wins: {resultHistory.wins}</span>\n          <span>Draws: {resultHistory.draws}</span>\n          <span>Loses: {resultHistory.loses}</span>\n        </div>\n      )}\n      <div>\n        {isOwner ? <button>Close Room</button> : <button>Leave Room</button>}\n        {isOwner && playerCount === 2 && <button>Kick Opponent</button>}\n      </div>\n    </>\n  );\n}\n\nexport default Header;\n","import \"./board.css\";\n\nfunction Board({ viewer, board, placePiece, colours, toPlayNext }) {\n  const rows = board.length;\n  let tableRows = [];\n  // the first row goes on the bottom, visually\n  for (let row = rows - 1; row > -1; row--) {\n    tableRows.push(\n      <Row\n        key={row}\n        viewer={viewer}\n        row={board[row]}\n        placePiece={placePiece}\n        colours={colours}\n        toPlayNext={toPlayNext}\n      />\n    );\n  }\n\n  return (\n    <table className=\"board\" style={{ backgroundColor: \"Black\" }}>\n      <tbody>{tableRows}</tbody>\n    </table>\n  );\n}\n\nfunction Row({ viewer, row, placePiece, colours, toPlayNext }) {\n  let rowCells = row.map(({ player, isHighlight }, col) => {\n    return (\n      <Cell\n        key={col}\n        viewer={viewer}\n        col={col}\n        player={player}\n        placePiece={placePiece}\n        colours={colours}\n        isHighlight={isHighlight}\n        toPlayNext={toPlayNext}\n      />\n    );\n  });\n\n  return <tr>{rowCells}</tr>;\n}\n\nfunction Cell({\n  viewer,\n  col,\n  player,\n  placePiece,\n  colours,\n  isHighlight,\n  toPlayNext,\n}) {\n  const backgroundColor = colours[player] || \"White\";\n  const borderColor = isHighlight\n    ? oppColour(backgroundColor)\n    : backgroundColor;\n  const pieceStyle = { backgroundColor, borderColor };\n\n  // can click if there is no piece && the viewer is next to play\n  // note that if game is over, toPlayNext is null so this works\n  const isClickable = player === null && viewer === toPlayNext;\n  const cellClass = isClickable ? \"clickable cell\" : \"cell\";\n  const clickHandler = () => player === null && placePiece(toPlayNext, col);\n  // TEMP: change cellOnClick check to isClickable, as in cellClass\n\n  return (\n    <td className={cellClass} onClick={clickHandler}>\n      <span className=\"piece\" style={pieceStyle}></span>\n    </td>\n  );\n}\n\nfunction oppColour(colour) {\n  // TODO: calculate opposite colour (just using White for now)\n  return \"White\";\n}\n\nexport default Board;\nexport { Row, Cell }; // for testing\n","function Footer({\n  viewer,\n  toPlayNext,\n  gameStatus,\n  resetGame,\n  restartMethod,\n  wentFirst,\n  setWentFirst,\n  dispatchResult,\n}) {\n  function message() {\n    switch (gameStatus) {\n      case viewer:\n        return \"Congratulations, you won!\";\n      case 1 - viewer:\n        return \"You lost.\";\n      case \"draw\":\n        return \"It's a draw.\";\n      case \"ongoing\":\n        return viewer === toPlayNext\n          ? \"It's your turn to drop a piece.\"\n          : \"Waiting for your opponent to move.\";\n      default:\n        return \"Something has gone wrong. Apologies.\";\n    }\n  }\n\n  function restartHandler(gameStatus) {\n    switch (restartMethod) {\n      case \"random\":\n        const player = Math.floor(Math.random() * 2);\n        resetGame(player);\n        setWentFirst(player);\n        break;\n      case \"alternate\":\n        resetGame(1 - wentFirst);\n        setWentFirst(1 - wentFirst);\n        break;\n      case \"loser\":\n        if (gameStatus === \"draw\") {\n          // if it's a draw, keep the same player\n          resetGame(wentFirst);\n        } else {\n          resetGame(1 - gameStatus);\n          setWentFirst(1 - gameStatus);\n        }\n        break;\n      case \"winner\":\n        if (gameStatus === \"draw\") {\n          // if it's a draw, keep the same player\n          resetGame(wentFirst);\n        } else {\n          resetGame(gameStatus);\n        }\n        break;\n      default:\n        console.log(\"New Game click handler didn't match any case.\");\n        resetGame(0);\n    }\n  }\n\n  function forfeitHandler() {\n    // TODO: update W-D-L record on forfeit\n    restartHandler(1); // call with gameStatus being 1 (opponent win)\n  }\n\n  // TODO: improve Footer design/css\n  return (\n    <>\n      <p>{message()}</p>\n      {gameStatus === \"ongoing\" ? (\n        <button onClick={forfeitHandler}>Forfeit</button>\n      ) : (\n        <button onClick={restartHandler}>New Game</button>\n      )}\n    </>\n  );\n}\n\nexport default Footer;\n","import { useState, useReducer } from \"react\";\n\n//// Generic constants helpers\n\n// the possible line directions from/to a fixed point\nconst directions = [\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n];\n\n// create empty tables (for initial states, and on resets)\nfunction emptyTable(rows, cols, val) {\n  let board = [];\n  for (let r = 0; r < rows; r++) {\n    let row = [];\n    for (let c = 0; c < cols; c++) {\n      row.push(val === \"empty\" ? {} : val);\n    }\n    board.push(row);\n  }\n  return board;\n}\n\n// merge data into one table for passing to component\nfunction combineTables(tables, names) {\n  const tableCount = tables.length;\n  const [rows, cols] = [tables[0].length, tables[0][0].length];\n  let combinedTable = emptyTable(rows, cols, \"empty\");\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      combinedTable[row][col] = {};\n      for (let i = 0; i < tableCount; i++) {\n        combinedTable[row][col][names[i]] = tables[i][row][col];\n      }\n    }\n  }\n  return combinedTable;\n}\n\n//// Reducers\n// outside the hook function to ensure they are pure\n\nfunction moveHistoryReducer(state, action) {\n  let newState = [...state];\n  switch (action.type) {\n    case \"reset\":\n      return [];\n    case \"addMove\":\n      let { player, row, col } = action;\n      newState.push({ player, row, col });\n      return newState;\n    case \"undo\":\n      // NOTE: this case is currently not used\n      if (state === []) {\n        // nothing to undo\n        return state;\n      } else {\n        newState.pop();\n        return newState;\n      }\n    default:\n      console.log(\"moveHistoryReducer switch didn't match any case\");\n      return state;\n  }\n}\n\nfunction piecesReducer(state, action) {\n  let newState = [...state];\n  switch (action.type) {\n    case \"reset\":\n      return emptyTable(action.rows, action.cols, null);\n    case \"placePiece\":\n      // add the piece\n      newState[action.row][action.col] = action.player;\n      return newState;\n    case \"undo\":\n      // NOTE: this case is currently not used\n      newState[action.row][action.col] = null;\n      return newState;\n    default:\n      console.log(\"peicesReducer switch didn't match any case\");\n      return state;\n  }\n}\n\n//// The actual hook\n\nfunction useGame(initialToPlayFirst, rows = 6, cols = 7, lineLen = 4) {\n  //// States & Constants\n\n  // index of player to play first; only updates on reset\n  const [toPlayFirst, setToPlayFirst] = useState(initialToPlayFirst);\n  // stack (array) of {player, row, col}\n  const [moveHistory, dispatchMoveHistory] = useReducer(moveHistoryReducer, []);\n  // table of player indices/null; indicates which piece is there (if any)\n  const [pieces, dispatchPieces] = useReducer(\n    piecesReducer,\n    emptyTable(rows, cols, null)\n  );\n  // index of player, or draw or ongoing\n  const gameStatus = isWon()\n    ? moveHistory[moveHistory.length - 1].player\n    : isFull()\n    ? \"draw\"\n    : \"ongoing\";\n  // table of booleans; indicates whether spot is highlighted in a win\n  // (not using state and useEffect since it might make undo awkward?)\n  const highlights = createHighlights();\n  // matrix, row 0 at the bottom; each cell is an object\n  const board = combineTables([pieces, highlights], [\"player\", \"isHighlight\"]);\n  // index of player to play next move, or null if game is not ongoing\n  const toPlayNext =\n    gameStatus !== \"ongoing\"\n      ? null\n      : moveHistory.length === 0\n      ? toPlayFirst\n      : 1 - moveHistory[moveHistory.length - 1].player;\n\n  //// Helpers\n  // isWon and createHighlights share a lot of code :(\n\n  // find row that piece will end up in when dropped in this col\n  function findEmptyRow(col) {\n    for (let row = 0; row < rows; row++) {\n      if (pieces[row][col] === null) {\n        return row;\n      }\n    }\n    return null;\n  }\n\n  // check whether the board is full (using pieces)\n  function isFull() {\n    // check the top row for nulls\n    for (let col = 0; col < cols; col++) {\n      if (pieces[rows - 1][col] === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // check if the game is won\n  function isWon() {\n    if (moveHistory.length < 2 * lineLen - 1) {\n      // impossible for anyone to have won yet\n      return false;\n    }\n    // only need to examine most recent move (which exists)\n    const { player, row, col } = moveHistory[moveHistory.length - 1];\n    for (let d = 0; d < directions.length; d++) {\n      const [d_r, d_c] = directions[d];\n      // check for a win using given piece in direction directions[d]\n      for (let j = -3; j < 1; j++) {\n        // check for a win in the direction starting from offset of j\n        if (checkLine(player, row + j * d_r, col + j * d_c, d_r, d_c)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // highlight winning locations\n  function createHighlights() {\n    let table = emptyTable(rows, cols, false);\n    if (moveHistory.length < 2 * lineLen - 1) {\n      // impossible for anyone to have won yet; no highlights needed\n      return table;\n    }\n    // only check the most recently played location (which exists)\n    let { player, row, col } = moveHistory[moveHistory.length - 1];\n    for (let d = 0; d < directions.length; d++) {\n      const [d_r, d_c] = directions[d];\n      // for the 4 pieces in this direction (including row,col),\n      //  check if it is in a line pointing towards row,col\n      for (let j = -lineLen + 1; j < 1; j++) {\n        if (checkLine(player, row + j * d_r, col + j * d_c, d_r, d_c)) {\n          // this piece, and the 3 after it, form a line of 4, so update them all\n          for (let k = j; k < j + lineLen; k++) {\n            table[row + k * d_r][col + k * d_c] = true;\n          }\n        }\n      }\n    }\n    return table;\n  }\n\n  // given a piece and a direction, check if it's a line of 4\n  function checkLine(player, row, col, d_r, d_c) {\n    for (let k = 0; k < lineLen; k++) {\n      let [r, c] = [row + k * d_r, col + k * d_c];\n      // if (r, c) is out of bounds, or doesn't have the right piece\n      if (0 > r || r >= rows || 0 > c || c >= cols || pieces[r][c] !== player) {\n        return false;\n      }\n    }\n    // all 4 were in-bounds and belonged to player, so return true (they won)\n    return true;\n  }\n\n  //// Externally accessible functions\n\n  // given out to reset all states\n  function resetGame(player) {\n    setToPlayFirst(player);\n    dispatchMoveHistory({ type: \"reset\" });\n    // (use dispatch instead of useEffect since might make undo awkward?)\n    dispatchPieces({ type: \"reset\", rows, cols });\n  }\n\n  // given out to allow component to (attempt to) place a piece\n  function placePiece(player, col) {\n    let row = findEmptyRow(col);\n    // only proceed if move is valid\n    if (gameStatus === \"ongoing\" && player === toPlayNext && row !== null) {\n      dispatchMoveHistory({ type: \"addMove\", player, row, col });\n      // (use dispatch instead of useEffect since might make undo awkward?)\n      dispatchPieces({ type: \"placePiece\", player, row, col });\n    }\n  }\n\n  // Return\n\n  // TODO: return an undo function, maybe?\n  return { gameStatus, toPlayNext, board, resetGame, placePiece };\n}\n\nexport { useGame };\n","import { useState, useEffect, useReducer } from \"react\";\n\nimport { useGame } from \"./useGame.js\";\n\n// TODO: NEXT: clean up; encapsulate more and return more specific functions\n\n//// Reducers\n\nfunction opponentReducer(state, action) {\n  let newState = [...state];\n  newState[action.property] = action.value;\n  return newState;\n}\n\nfunction resultReducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return initialResults;\n    default:\n      // win, draw, or lose\n      let newState = { ...state };\n      newState[action.type + \"s\"] += 1;\n      return newState;\n  }\n}\n\nconst initialResults = { wins: 0, draws: 0, loses: 0 };\n\nfunction useRoom() {\n  // first player of first game is random, regardless\n  const firstPlayer = Math.floor(Math.random() * 2);\n\n  //// States\n\n  // TODO: keep playerCount and opponent updated -- involves network\n\n  // how many players are present\n  // TEMP: initial state -- should be 2 if joining someone else's room\n  const [playerCount, setPlayerCount] = useState(2);\n  // other player's name and colour, once they join\n  // TEMP: initial state -- should check network and be null if necessary\n  const [opponent, dispatchOpponent] = useReducer(opponentReducer, {\n    name: \"Bob\",\n    colour: \"red\",\n  });\n  // who started the current game (in case first player should alternate)\n  const [wentFirst, setWentFirst] = useState(firstPlayer);\n  // history of all games played\n  const [resultHistory, dispatchResult] = useReducer(\n    resultReducer,\n    initialResults\n  );\n  // the game custom hook\n  const game = useGame(firstPlayer);\n  const { gameStatus, toPlayNext, board, resetGame, placePiece } = game;\n\n  //// Effects\n\n  // (only) when gameStatus changes, update the W-D-L tally\n  useEffect(() => {\n    switch (gameStatus) {\n      case 0:\n        // TODO: add sounds for each end-game case\n        dispatchResult({ type: \"win\" });\n        break;\n      case 1:\n        dispatchResult({ type: \"lose\" });\n        break;\n      case \"draw\":\n        dispatchResult({ type: \"draw\" });\n        break;\n      default:\n    }\n  }, [gameStatus]);\n\n  // play sounds when it becomes your turn to play (opponent moves, or new game)\n  useEffect(() => {\n    if (toPlayNext === 0) {\n      // TODO: your turn sound\n    }\n  }, [toPlayNext]);\n  useEffect(() => {\n    if (playerCount === 1) {\n      // TODO: player leaving sound\n    } else {\n      // TODO: player joining sound\n    }\n  }, [playerCount]);\n\n  //// Return\n\n  return {\n    game,\n    playerCount,\n    opponent,\n    resultHistory,\n    wentFirst,\n    setWentFirst,\n    dispatchResult,\n  };\n}\n\nexport { useRoom };\n","// import { useState, useReducer, useEffect } from \"react\";\n\nimport Header from \"./Header.js\";\nimport Board from \"./Board.js\";\nimport Footer from \"./Footer.js\";\n\nimport { useRoom } from \"./useRoom.js\";\n\n// the room is seen from the current player's view\n//  each player has their own instantiation of the 'shared' room\n\nfunction Room({ isOwner, roomId, restartMethod }) {\n  //// States\n  // room\n  const {\n    game,\n    playerCount,\n    opponent,\n    resultHistory,\n    wentFirst,\n    setWentFirst,\n    dispatchResult,\n  } = useRoom();\n  // game, called within room hook\n  const { gameStatus, toPlayNext, board, resetGame, placePiece } = game;\n  //// Return\n\n  return (\n    <>\n      <h2>Room</h2>\n      <Header\n        isOwner={isOwner}\n        playerCount={playerCount}\n        opponent={opponent}\n        restartMethod={restartMethod}\n        resultHistory={resultHistory}\n      />\n      {playerCount === 2 && (\n        <Board\n          viewer={0}\n          board={board}\n          placePiece={placePiece}\n          colours={[\"Blue\", opponent.colour]} // TEMP: get blue from context\n          toPlayNext={toPlayNext}\n        />\n      )}\n      {playerCount === 2 && (\n        <Footer\n          viewer={0}\n          toPlayNext={toPlayNext}\n          gameStatus={gameStatus}\n          resetGame={resetGame}\n          restartMethod={restartMethod}\n          wentFirst={wentFirst}\n          setWentFirst={setWentFirst}\n          dispatchResult={dispatchResult}\n        />\n      )}\n    </>\n  );\n}\n\nexport default Room;\n","import Options from \"./Options.js\";\nimport Lobby from \"./Lobby.js\";\nimport Room from \"./Room.js\";\n\nfunction App() {\n  // TODO: add Links component\n  return (\n    <>\n      <h1>Connect 4 [WIP]</h1>\n      <Options />\n      {true && <Lobby />}\n      {/* TEMP: parameters */}\n      {true && (\n        <Room isOwner={true} roomId=\"2134676543\" restartMethod=\"alternate\" />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}