{"version":3,"sources":["Options.js","Lobby.js","Header.js","Board.js","Footer.js","useGame.js","Room.js","App.js","index.js"],"names":["Options","Lobby","Header","Row","row","placePiece","colours","toPlayNext","rowCells","map","col","player","inLine","Cell","cellClass","cellOnClick","a","b","className","onClick","style","backgroundColor","borderColor","styleColour","Board","board","tableRows","length","push","Footer","resetGame","boardReducer","state","action","type","emptyBoard","boardSize","newState","moveHistory","console","log","historyReducer","pop","rows","cols","r","c","useGame","toPlayFirst","directions","useState","gameStatus","setGameStatus","setToPlayNext","useReducer","dispatchMove","dispatchHistory","findEmptyRow","message","forEach","d_r","d_c","current","k","slice","cell","includes","checkWinOrDraw","Room","creator","property","value","name","colour","players","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73ebae34.chunk.js","sourcesContent":["function Options() {\n  // TODO: Options component\n  return <p>Options: set name, colour, theme</p>;\n}\n\nexport default Options;\n","function Lobby() {\n  // TODO: Lobby component\n  return (\n    <>\n      <h2>Lobby</h2>\n      <p>Create or join a room.</p>\n    </>\n  );\n}\n\nexport default Lobby;\n","function Header() {\n  // TODO: Header component\n  return (\n    <p>\n      Header: room status (names, colours, w-l-d record), room reset options.\n    </p>\n  );\n}\n\nexport default Header;\n","import \"./board.css\";\n\nfunction Board({ board, placePiece, colours, toPlayNext }) {\n  let rows = board.length;\n  let tableRows = [];\n  // the first row goes on the bottom, visually\n  for (let row = rows - 1; row > -1; row--) {\n    tableRows.push(\n      <Row\n        key={row}\n        row={board[row]}\n        placePiece={placePiece}\n        colours={colours}\n        toPlayNext={toPlayNext}\n      />\n    );\n  }\n\n  return (\n    <table className=\"board\">\n      <tbody>{tableRows}</tbody>\n    </table>\n  );\n}\n\nfunction Row({ row, placePiece, colours, toPlayNext }) {\n  let rowCells = row.map(({ player, inLine }, col) => {\n    return (\n      <Cell\n        key={col}\n        col={col}\n        player={player}\n        placePiece={placePiece}\n        colours={colours}\n        inLine={inLine}\n        toPlayNext={toPlayNext}\n      />\n    );\n  });\n\n  return <tr>{rowCells}</tr>;\n}\n\nfunction Cell({ col, player, placePiece, colours, inLine, toPlayNext }) {\n  function styleColour() {\n    let backgroundColor = colours[player];\n    let borderColor = inLine\n      ? oppositeColour(backgroundColor)\n      : backgroundColor;\n    return { backgroundColor, borderColor };\n  }\n  const cellClass = player === null ? \"clickable cell\" : \"cell\";\n  const cellOnClick = player === null ? placePiece : (a, b) => {};\n\n  return (\n    <td className={cellClass} onClick={() => cellOnClick(toPlayNext, col)}>\n      {player !== null && <span className=\"piece\" style={styleColour()}></span>}\n    </td>\n  );\n}\n\nfunction oppositeColour(colour) {\n  // TODO: calculate opposite colour (just using DarkGray for now)\n  return \"DarkGray\";\n}\n\nexport default Board;\nexport { Row, Cell }; // for testing\n","function Footer({ resetGame }) {\n  // TODO: Footer component\n  return (\n    <>\n      <p>Footer: game status (onging/lost/etc), game reset options.</p>\n      <button onClick={() => resetGame(0)}>Reset Game</button>\n    </>\n  );\n}\n\nexport default Footer;\n","import { useState, useReducer } from \"react\";\n\n//// reducers\n// outside the hook function to ensure they are pure\n\nfunction boardReducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return emptyBoard(action.boardSize);\n    case \"placePiece\":\n      let newState = [...state];\n      newState[action.row][action.col] = {\n        ...newState[action.row][action.col],\n        player: action.player,\n      };\n      // TODO: highlight winning positions if necessary\n      return newState;\n    case \"undo\":\n      // this case is currently not used\n      // TODO: build in UNDO to interface and add workflow -- note it needs moveHistory passed in\n      if (action.moveHistory === []) {\n        return state;\n      } else {\n        let newState = [...state];\n        delete newState[action.row][action.col].player;\n        // TODO: unhighlight winning positions if necessary\n        return newState;\n      }\n    default:\n      console.log(\"boardReducer switch didn't match any case\");\n      return state;\n  }\n}\n\nfunction historyReducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return [];\n    case \"addMove\":\n      let newState = [...state];\n      let { player, row, col } = action;\n      newState.push({ player, row, col });\n      return newState;\n    case \"undo\":\n      if (state === []) {\n        return state;\n      } else {\n        let newState = [...state];\n        newState.pop();\n        return newState;\n      }\n    default:\n      console.log(\"historyReducer switch didn't match any case\");\n      return state;\n  }\n}\n\n// helpers for reducers\n\n// create initial empty board (on resets)\nfunction emptyBoard([rows, cols]) {\n  let board = [];\n  for (let r = 0; r < rows; r++) {\n    let row = [];\n    for (let c = 0; c < cols; c++) {\n      row.push({ player: null, inLine: false });\n    }\n    board.push(row);\n  }\n  return board;\n}\n\n// helper: find row that piece will end up in\nfunction findEmptyRow(state, col) {\n  let rows = state.length;\n  for (let row = 0; row < rows; row++) {\n    if (state[row][col].player === null) {\n      return row;\n    }\n  }\n  return null;\n}\n\nfunction useGame(toPlayFirst) {\n  //// Constants\n\n  // to change board dimensions, change this (maybe add as param for hook?)\n  const boardSize = [6, 7];\n  // the possible line directions (horizontal, vertical, diagonal, anti-diagonal)\n  const directions = [\n    [0, 1],\n    [1, 0],\n    [1, 1],\n    [-1, 1],\n  ];\n\n  //// States\n\n  // ongoing, draw, or the index of a player\n  const [gameStatus, setGameStatus] = useState(\"ongoing\");\n  // indices of winning pieces\n  const [toPlayNext, setToPlayNext] = useState(toPlayFirst);\n  // array of arrays, row 0 at the bottom;\n  //  cells are objects storing multiple pieces of information\n  const [board, dispatchMove] = useReducer(boardReducer, emptyBoard(boardSize));\n  // stack (array) of {player, row, col}\n  const [moveHistory, dispatchHistory] = useReducer(historyReducer, []);\n\n  // NOTE: this is unused; encorporate it into boardReducer (to highlight wins)\n  // function indicesReducer(state, action) {\n  //   switch (action.type) {\n  //     case \"reset\":\n  //       return [];\n  //     case \"addIndices\":\n  //       let { row, col, d_r, d_c } = action;\n  //       let newState = [];\n  //       for (let k = -3; k < 1; k--) {\n  //         newState.push([row + k * d_r, col + k * d_c]);\n  //       }\n  //       return newState;\n  //     default:\n  //       console.log(\"indicesReducer switch didn't match any case\");\n  //       return state;\n  //   }\n  // }\n\n  // internal functions\n\n  // piece was just added to row, col by player\n  // check whether that was a winning move\n  //  and whether the board is full (a draw)\n  function checkWinOrDraw(player, row, col) {\n    console.log(\n      \"Checking \" +\n        player +\n        \" at \" +\n        row +\n        \",\" +\n        col +\n        \": \" +\n        board[row][col].player\n    ); // TEMP:\n    // NOTE: modifications likely needed\n    let [rows, cols] = [board.length, board[0].length];\n    let message = null;\n    directions.forEach(([d_r, d_c]) => {\n      let current = 0;\n      for (let k = -3; k < 4; k++) {\n        if (\n          // check coordinates are in bounds, then check for piece\n          -1 < row + k * d_r &&\n          row + k * d_r < rows &&\n          -1 < col + k * d_c &&\n          col + k * d_c < cols &&\n          board[row + k * d_r][col + k * d_c].player === player\n        ) {\n          current += 1;\n          if (current >= 4) {\n            // the only use of the 4 from \"connect 4\"\n            message = [row + k * d_r, col + k * d_c, d_r, d_c];\n          }\n        } else {\n          current = 0;\n        }\n      }\n    });\n\n    if (message !== null) {\n      // let [row, col, d_r, d_c] = message;\n      setGameStatus(player);\n      // TODO: deal with highlighting winning pieces (above commented row too)\n      // dispatchIndices({ type: \"addIndices\", row, col, d_r, d_c });\n      return;\n    } else if (\n      !board[boardSize[0] - 1]\n        .slice()\n        .map((cell) => cell.player)\n        .includes(null)\n    ) {\n      setGameStatus(\"draw\");\n      return;\n    }\n  }\n\n  // Externally accessible functions\n\n  // given out to reset all states\n  function resetGame(player) {\n    // TODO: NEXT: reset doesn't work properly -- check states before/after\n    console.log(\"Reseting!\"); // TEMP:\n    setGameStatus(\"ongoing\");\n    setToPlayNext(player);\n    dispatchMove({ type: \"reset\", boardSize });\n    dispatchHistory({ type: \"reset\" });\n    console.log(\"Reset.\"); // TEMP:\n  }\n\n  // given out to allow component to (attempt to) place a piece\n  function placePiece(player, col) {\n    let row = findEmptyRow(board, col);\n    if (player === toPlayNext && row !== null) {\n      // move is possible; proceed\n      dispatchMove({ type: \"placePiece\", player, row, col });\n      dispatchHistory({ type: \"addMove\", player, row, col });\n      // TODO: NEXT: game state is not updating on win/lose or on draw\n      // TODO: NEXT:  since piece is not being placed before the check\n      // TODO: NEXT: research problem and solution(s)\n      checkWinOrDraw(player, row, col);\n      setToPlayNext(1 - player);\n    }\n  }\n\n  // Return\n\n  return { gameStatus, toPlayNext, board, moveHistory, resetGame, placePiece };\n}\n\nexport { useGame };\n","import { useState, useReducer } from \"react\";\n\nimport Header from \"./Header.js\";\nimport Board from \"./Board.js\";\nimport Footer from \"./Footer.js\";\n\nimport { useGame } from \"./useGame.js\";\n\nfunction Room({ creator }) {\n  // TODO: Room component\n\n  // TODO: keep playerCount and players up-to-date (useEffect?)\n  // TODO: allow player 0 to pick who goes first\n\n  // how many players are present\n  // TEMP: initial state\n  const [playerCount, setPlayerCount] = useState(1);\n  // index to access self in players array\n  const selfIndex = creator ? 0 : 1;\n  // other player's name and colour, once they join\n  // TEMP: initial state\n  const [players, setPlayers] = useReducer(playersDispatch, [\n    { name: \"Alice\", colour: \"blue\" },\n    { name: \"Bob\", colour: \"red\" },\n  ]);\n  // the game custom hook\n  // TEMP: argument of 0 (index of first palyer)\n  const {\n    gameStatus,\n    toPlayNext,\n    board,\n    moveHistory,\n    resetGame,\n    placePiece,\n  } = useGame(0);\n\n  function playersDispatch(state, action) {\n    let newState = [...state];\n    newState[action.player][action.property] = action.value;\n    return newState;\n  }\n\n  return (\n    <>\n      <h2>Room</h2>\n      <Header />\n      <Board\n        board={board}\n        placePiece={placePiece}\n        colours={[players[0].colour, players[1].colour]}\n        toPlayNext={toPlayNext}\n      />\n      <Footer resetGame={resetGame} />\n    </>\n  );\n}\n\nexport default Room;\n","import Options from \"./Options.js\";\nimport Lobby from \"./Lobby.js\";\nimport Room from \"./Room.js\";\n\nfunction App() {\n  // TODO: add Links component\n  return (\n    <>\n      <h1>Connect 4 [WIP]</h1>\n      <Options />\n      {true && <Lobby />}\n      {true && <Room />}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}